/**
 * GPII get token Handler
 *
 * Copyright 2014 Raising the Floor - International
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * You may obtain a copy of the License at
 * https://github.com/gpii/universal/LICENSE.txt
 */

 /*global require*/

(function () {

    "use strict";

    var fluid = require("infusion"),
        request = fluid.registerNamespace("gpii.request.flowManager");

    fluid.defaults("kettle.requests.request.handler.getToken", {
        gradeNames: ["fluid.littleComponent", "autoInit"],
        invokers: {
            handle: {
                funcName: "gpii.request.flowManager.onGetToken",
                args: [
                    "{requestProxy}.events.onError"
                ]
            }
        }
    });

    request.onGetToken = function (event) {
        var msg = "Attempt to get token failed as session support is disabled";
        fluid.log(msg);
        event.fire({
            isError: true,
            message: msg
        });
    };

    // TODO: This configuration is much too bulky to be the standard form for a session-aware request. It has
    // currently been copied from UserLogin etc. for speed, we need to resolve GPII-584 as well as KETTLE-22
    // so that this can be expressed much more economically.
    fluid.defaults("kettle.gradeLinkageRecord.getTokenHandlerSession", {
        gradeNames: ["autoInit", "fluid.gradeLinkageRecord"],
        contextGrades: ["gpii.flowManager.handlerSession",
            "kettle.requests.request.handler.getToken"],
        resultGrades: ["gpii.flowManager.getTokenSession"]
    });

    fluid.defaults("gpii.flowManager.getTokenSession", {
        gradeNames: ["fluid.littleComponent", "autoInit"],
        invokers: {
            handle: {
                funcName: "gpii.request.flowManager.onGetTokenSession",
                args: [
                    "{request}.session.session.token",
                    "{requestProxy}.events"
                ],
                dynamic: true
            }
        }
    });

    request.onGetTokenSession = function (token, events) {
        if (token) {
            fluid.log("Reporting currently logged in user as: "+token);
            events.onSuccess.fire(token);
        } else {
            events.onError.fire({
                isError: true,
                message: "No user currently logged into the system"
            });
        }
    };
})();
